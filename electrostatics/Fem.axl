<?xml version="1.0" ?>
<module name="Fem" version="1.0">
  <description>FEM module description</description>
  <entry-points>
    <entry-point method-name="compute" name="Compute" where="compute-loop" property="none" />
    <entry-point method-name="startInit" name="StartInit" where="start-init" property="none" />
  </entry-points>
  <variables>
    <variable field-name="phi" name="Phi" data-type="real" item-kind="node" dim="0">
      <description>FEM variable phi on nodes for electrostatic potential</description>
    </variable>
    <variable field-name="E" name="E" data-type="real3" item-kind="cell" dim="0">
      <description>electric field vector on cells</description>
    </variable>
    <variable field-name="node_coord" name="NodeCoord" data-type="real3" item-kind="node" dim="0">
      <description>Node Coordinates from Arcane variable</description>
    </variable>
  </variables>
  <options>
    <simple name="rho" type="real" default="0.0">
      <description>charge density of the material.</description>
    </simple>
    <simple name="epsilon" type="real" default="0.0">
      <description>freespace permittivity.</description>
    </simple>
    <simple name="result-file" type="string" optional="true">
      <description>File name of a file containing the values of the solution vector to check the results</description>
    </simple>
    <simple name="mesh-type" type="string"  default="TRIA3" optional="true">
      <description>Type of mesh provided to the solver</description>
    </simple>

    <!-- - - - - - dirichlet-boundary-condition - - - - -->
    <complex name  = "dirichlet-boundary-condition"
             type  = "DirichletBoundaryCondition"
             minOccurs = "0"
             maxOccurs = "unbounded"
      >
      <description>
        Dirichlet boundary condition
      </description>
      <extended name = "surface" type = "Arcane::FaceGroup">
        <description>
          FaceGroup on which to apply these boundary condition
        </description>
      </extended>
      <simple name = "value" type = "real">
        <description>
          Value of the boundary condition
        </description>
      </simple>
      <simple name = "enforce-Dirichlet-method" type = "string" default="Penalty" optional="true">
        <description>
          Method via which Dirichlet boundary condition is imposed
        </description>
      </simple>
      <simple name = "penalty" type = "real" default="1.e30" optional="true">
        <description>
          Penalty value for enforcing Dirichlet condition
        </description>
      </simple>
    </complex>

    <!-- - - - - - manufactured-solution - - - - -->
    <complex name  = "manufactured-solution"
             type  = "ManufacturedSolution"
             minOccurs = "0"
             maxOccurs = "unbounded"
      >
      <description>
        Dirichlet boundary condition
      </description>
      <simple name="manufactured-dirichlet" type="bool"  default="false" optional="true">
        <description>
          Function for Dirichlet boundary condition
        </description>
      </simple>
      <simple name = "enforce-Dirichlet-method" type = "string" default="Penalty" optional="true">
        <description>
          Method via which Dirichlet boundary condition is imposed
        </description>
      </simple>
      <simple name = "penalty" type = "real" default="1.e30" optional="true">
        <description>
          Penalty value for enforcing Dirichlet condition
        </description>
      </simple>
      <simple name="manufactured-source" type="bool"  default="false" optional="true">
        <description>
          Function for manufactured source term condition
        </description>
      </simple>
    </complex>

    <!-- - - - - - neumann-boundary-condition - - - - -->
    <complex name  = "neumann-boundary-condition"
             type  = "NeumannBoundaryCondition"
             minOccurs = "0"
             maxOccurs = "unbounded"
      >
      <description>
        Neumann boundary condition
      </description>
      <extended name = "surface" type = "Arcane::FaceGroup">
        <description>
          FaceGroup on which to apply these boundary condition
        </description>
      </extended>
      <simple name = "value" type = "real" optional = "true">
        <description>
          Value of the boundary condition
        </description>
      </simple>
      <simple name = "valueX" type = "real" optional = "true">
        <description>
          Value of the Neumann load in x
        </description>
      </simple>
      <simple name = "valueY" type = "real" optional = "true">
        <description>
          Value of the Neumann load in y
        </description>
      </simple>
    </complex>


    <!-- - - - - - dirichlet-point-condition - - - - -->
    <complex name  = "dirichlet-point-condition"
             type  = "DirichletPointCondition"
             minOccurs = "0"
             maxOccurs = "unbounded"
      >
      <description>
        Dirichlet point condition
      </description>
      <extended name = "node" type = "Arcane::NodeGroup">
        <description>
          NodeGroup on which to apply these point Dirichlet condition
        </description>
      </extended>
      <simple name = "value" type = "real">
        <description>
          Value of the point Dirichlet condition
        </description>
      </simple>
      <simple name = "enforce-Dirichlet-method" type = "string" default="Penalty" optional="true">
        <description>
          Method via which Dirichlet boundary condition is imposed
        </description>
      </simple>
      <simple name = "penalty" type = "real" default="1.e30" optional="true">
        <description>
          Penalty value for enforcing Dirichlet condition
        </description>
      </simple>
    </complex>

    <service-instance name = "linear-system"
                      type = "Arcane::FemUtils::IDoFLinearSystemFactory"
                      default = "AlephLinearSystem"
                      />
  </options>
</module>
