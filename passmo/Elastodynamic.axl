<?xml version="1.0" ?>
<module name="Elastodynamic" version="1.0">
  <description>Elastodynamic module</description>
  <variables>
    <variable field-name="acc" name="Acc" data-type="real3" item-kind="node" dim="0">
      <description>Acceleration vectors on node coords at current step</description>
    </variable>
    <variable field-name="vel" name="Vel" data-type="real3" item-kind="node" dim="0">
      <description>Velocity vectors on node coords at current step</description>
    </variable>
    <variable field-name="displ" name="Displ" data-type="real3" item-kind="node" dim="0">
      <description>Displacement vectors on node coords at current step</description>
    </variable>
    <variable field-name="prev_acc" name="PrevAcc" data-type="real3" item-kind="node" dim="0">
      <description>Acceleration vectors on node coords at previous step</description>
    </variable>
    <variable field-name="prev_vel" name="PrevVel" data-type="real3" item-kind="node" dim="0">
      <description>Velocity vectors on node coords at previous step</description>
    </variable>
    <variable field-name="prev_displ" name="PrevDispl" data-type="real3" item-kind="node" dim="0">
      <description>Displacement vectors on node coords at previous step</description>
    </variable>
    <variable field-name="force" name="Force" data-type="real3" item-kind="node" dim="0">
      <description>Force resultants on node coords</description>
    </variable>
    <variable field-name="imposed_displ" name="ImposedDispl" data-type="real3" item-kind="node" dim="0">
      <description>Nodal imposed displacements: spatial vector component = 1 if true, 0 otherwise </description>
    </variable>
    <variable field-name="imposed_vel" name="ImposedVel" data-type="real3" item-kind="node" dim="0">
      <description>Nodal imposed velocities: spatial vector component = 1 if true, 0 otherwise </description>
    </variable>
    <variable field-name="imposed_acc" name="ImposedAcc" data-type="real3" item-kind="node" dim="0">
      <description>Nodal imposed accelerations: spatial vector component = 1 if true, 0 otherwise </description>
    </variable>
    <variable field-name="imposed_force" name="ImposedForce" data-type="real3" item-kind="node" dim="0">
      <description>Nodal imposed forces: spatial vector component = 1 if true, 0 otherwise </description>
    </variable>
    <variable field-name="node_coord" name="NodeCoord" data-type="real3" item-kind="node" dim="0">
      <description>NodeCoord from Arcane variable</description>
    </variable>
    <variable field-name="strain" name="Strain" data-type="real3x3" item-kind="cell" dim="0">
      <description>Total strains per cell</description>
    </variable>
    <variable field-name="stress" name="Stress" data-type="real3x3" item-kind="cell" dim="0">
      <description>Total stresses per cell</description>
    </variable>
    <variable field-name="imposed_traction" name="ImposedTraction" data-type="real3" item-kind="face" dim="0">
      <description>Imposed traction vector on cell face</description>
    </variable>
    <variable field-name="e1_boundary" name="E1Boundary" data-type="real3" item-kind="face" dim="0">
      <description>1st normalized vector (in-plane) of the local face referential</description>
    </variable>
    <variable field-name="e2_boundary" name="E2Boundary" data-type="real3" item-kind="face" dim="0">
      <description>2nd normalized vector (in-plane in 3D and normal in 2D) of the local face referential</description>
    </variable>
    <variable field-name="e3_boundary" name="E3Boundary" data-type="real3" item-kind="face" dim="0">
      <description>3rd normalized vector (normal in 3D only) of the local face referential</description>
    </variable>

    <!-- - - - - - elastic properties - - - - -->
    <variable field-name="rho" name="Rho" data-type="real" item-kind="cell" dim="0">
      <description>Bulk density value per cell</description>
    </variable>
    <variable field-name="young" name="Young" data-type="real" item-kind="cell" dim="0">
      <description>Young Modulus value per cell</description>
    </variable>
    <variable field-name="nu" name="Nu" data-type="real" item-kind="cell" dim="0">
      <description>Poisson Ratio value per cell</description>
    </variable>
    <variable field-name="lambda" name="Lambda" data-type="real" item-kind="cell" dim="0">
      <description>First Lame parameter value per cell</description>
    </variable>
    <variable field-name="mu" name="Mu" data-type="real" item-kind="cell" dim="0">
      <description>Second Lame parameter value per cell</description>
    </variable>
    <variable field-name="vs" name="Vs" data-type="real" item-kind="cell" dim="0">
      <description>S-wave (shear) velocity value per cell</description>
    </variable>
    <variable field-name="vp" name="Vp" data-type="real" item-kind="cell" dim="0">
      <description>P-wave (compression) velocity value per cell</description>
    </variable>
  </variables>

  <entry-points>
    <entry-point method-name="startInit" name="StartInit" where="start-init" property="none" />
    <entry-point method-name="compute" name="Compute" where="compute-loop" property="none" />
  </entry-points>

  <options>

    <simple name="init-elast-type" type="string" optional="false">
      <description>Type of elastic properties provided by user on mesh cells (=string containing "young", "lame" or "veloc")</description>
    </simple>
    <simple name="bodyf" type="bool" default="true" optional="true">
      <description>Indicator to activate body forces.</description>
    </simple>
    <simple name = "displ-results" type = "string" default="displ-result.txt" optional = "true">
      <description>Filename containing the solution displacements</description>
    </simple>
    <simple name = "acc-results" type = "string" default="acc-result.txt" optional = "true">
      <description>Filename containing the solution accelerations</description>
    </simple>
    <simple name = "vel-results" type = "string" default="vel-result.txt" optional = "true">
      <description>Filename containing the solution velocities</description>
    </simple>
    <simple name = "stress-results" type = "string" default="stress-result.txt" optional = "true">
      <description>Filename containing the solution stresses per Cell</description>
    </simple>
    <simple name = "strain-results" type = "string" default="strain-result.txt" optional = "true">
      <description>Filename containing the solution strains per Cell</description>
    </simple>

    <simple name = "enforce-Dirichlet-method" type = "string" default="Penalty" optional="true">
      <description>
        Method via which Dirichlet boundary condition is imposed
      </description>
    </simple>
    <simple name = "penalty" type = "real" default="1.e30" optional="true">
      <description> Penalty value for enforcing Dirichlet conditions </description>
    </simple>
    <simple name = "linop-nstep" type = "integer" default="100" optional = "true">
      <description>Reform the operator of the linear system every nstep</description>
    </simple>

    <simple name = "gx" type = "real" default="0.0" optional="true">
      <description> Gravity along X direction </description>
    </simple>
    <simple name = "gy" type = "real" default="0.0" optional="true">
      <description> Gravity along Y direction </description>
    </simple>
    <simple name = "gz" type = "real" default="0.0" optional="true">
      <description> Gravity along Z direction </description>
    </simple>

    <!-- - - - - - init-elast-properties - - - - -->
    <complex name="init-elast-properties"
             type="InitElastProperties"
             minOccurs="0"
             maxOccurs="unbounded">

        <description>Definition of initial elastic properties on cell groups</description>
          <extended name="cell-group" type="Arcane::CellGroup">
            <description>Cell group on which to apply these initial conditions</description>
          </extended>
          <simple name="rho" type="real" default="2500.0" optional="true">
            <description>Initial constant bulk density</description>
          </simple>
          <simple name="young" type="real" optional="true">
            <description>Initial Young modulus</description>
          </simple>
          <simple name="nu" type="real" optional="true">
            <description>Initial Poisson ratio</description>
          </simple>
          <simple name="lambda" type="real" optional="true">
            <description>Initial 1st Lame coefficient</description>
          </simple>
          <simple name="mu" type="real" optional="true">
            <description>Initial 2nd (shear) Lame coefficient</description>
          </simple>
          <simple name="vp" type="real" optional="true">
            <description>Initial P-wave (compression) velocity</description>
          </simple>
          <simple name="vs" type="real" optional="true">
            <description>Initial S-wave (shear) velocity</description>
          </simple>
    </complex>
      <!-- - - - - - init-cell-condition - - - - -->
      <complex name="init-cell-condition"
               type="InitCellCondition"
               minOccurs="0"
               maxOccurs="unbounded">

        <description>Definition of initial strain or stress tensors (xx yy zz xy yz xz) on cell groups</description>
        <enumeration name="type" type="TypesElastodynamic::eCellCondition">
          <description>Type of cell initial condition</description>
          <enumvalue genvalue="TypesElastodynamic::Strain" name="strain" />
          <enumvalue genvalue="TypesElastodynamic::Stress" name="stress" />
        </enumeration>
          <extended name="cell-group" type="Arcane::CellGroup">
            <description>Cell group on which to apply these initial conditions</description>
          </extended>
          <simple name="const-vol-part" type="real3" default="0.0" optional="true">
            <description>Initial constant volumetric part (xx yy zz)</description>
          </simple>
    </complex>

    <!-- - - - - - dirichlet-boundary-condition - - - - -->
    <complex name="dirichlet-boundary-condition" type="DirichletBoundaryCondition" minOccurs="0" maxOccurs="unbounded">
      <description>Definition of Dirichlet boundary conditions on surfaces</description>
        <extended name="surface" type="Arcane::FaceGroup">
          <description>Surface on which to apply these boundary conditions</description>
        </extended>
        <simple name="Ux" type="real" default="0.0" optional="true">
          <description>Constant displacement value to impose</description>
        </simple>
        <simple name="Uy" type="real" default="0.0" optional="true">
          <description>Constant displacement value to impose</description>
        </simple>
        <simple name="Uz" type="real" default="0.0" optional="true">
          <description>Constant displacement value to impose</description>
        </simple>
        <simple name="Vx" type="real" default="0.0" optional="true">
          <description>Constant velocity value to impose</description>
        </simple>
        <simple name="Vy" type="real" default="0.0" optional="true">
          <description>Constant velocity value to impose</description>
        </simple>
        <simple name="Vz" type="real" default="0.0" optional="true">
          <description>Constant velocity value to impose</description>
        </simple>
        <simple name="Ax" type="real" default="0.0" optional="true">
          <description>Constant acceleration value to impose</description>
        </simple>
        <simple name="Ay" type="real" default="0.0" optional="true">
          <description>Constant acceleration value to impose</description>
        </simple>
        <simple name="Az" type="real" default="0.0" optional="true">
          <description>Constant acceleration value to impose</description>
        </simple>
        <simple name="Fx" type="real" default="0.0" optional="true">
          <description>Constant force value to impose</description>
        </simple>
        <simple name="Fy" type="real" default="0.0" optional="true">
          <description>Constant force value to impose</description>
        </simple>
        <simple name="Fz" type="real" default="0.0" optional="true">
          <description>Constant force value to impose</description>
        </simple>
        <simple name="U-curve" type="string" optional="true">
          <description>Time history curve for displacements to impose (t, X, Y, Z columns)</description>
        </simple>
        <simple name="V-curve" type="string" optional="true">
          <description>Time history curve for velocities to impose (t, X, Y, Z columns)</description>
        </simple>
        <simple name="A-curve" type="string" optional="true">
          <description>Time history curve for accelerations to impose (t, X, Y, Z columns)</description>
        </simple>
        <simple name="F-curve" type="string" optional="true">
          <description>Time history curve for forces to impose (t, X, Y, Z columns)</description>
        </simple>
    </complex>
    <!-- - - - - - dirichlet-point-condition - - - - -->
    <complex name="dirichlet-point-condition" type="DirichletPointCondition" minOccurs="0" maxOccurs="unbounded">
      <description>Definition of Dirichlet boundary conditions on points</description>
        <extended name="node" type="Arcane::NodeGroup">
          <description>Node(s) on which to apply this boundary condition</description>
        </extended>
        <simple name="Ux" type="real" default="0.0" optional="true">
          <description>Constant displacement value to impose</description>
        </simple>
        <simple name="Uy" type="real" default="0.0" optional="true">
          <description>Constant displacement value to impose</description>
        </simple>
        <simple name="Uz" type="real" default="0.0" optional="true">
          <description>Constant displacement value to impose</description>
        </simple>
        <simple name="Vx" type="real" default="0.0" optional="true">
          <description>Constant velocity value to impose</description>
        </simple>
        <simple name="Vy" type="real" default="0.0" optional="true">
          <description>Constant velocity value to impose</description>
        </simple>
        <simple name="Vz" type="real" default="0.0" optional="true">
          <description>Constant velocity value to impose</description>
        </simple>
        <simple name="Ax" type="real" default="0.0" optional="true">
          <description>Constant acceleration value to impose</description>
        </simple>
        <simple name="Ay" type="real" default="0.0" optional="true">
          <description>Constant acceleration value to impose</description>
        </simple>
        <simple name="Az" type="real" default="0.0" optional="true">
          <description>Constant acceleration value to impose</description>
        </simple>
        <simple name="Fx" type="real" default="0.0" optional="true">
          <description>Constant force value to impose</description>
        </simple>
        <simple name="Fy" type="real" default="0.0" optional="true">
          <description>Constant force value to impose</description>
        </simple>
        <simple name="Fz" type="real" default="0.0" optional="true">
          <description>Constant force value to impose</description>
        </simple>
        <simple name="U-curve" type="string" optional="true">
          <description>Time history curve for displacements to impose (t, X, Y, Z columns)</description>
        </simple>
        <simple name="V-curve" type="string" optional="true">
          <description>Time history curve for velocities to impose (t, X, Y, Z columns)</description>
        </simple>
        <simple name="A-curve" type="string" optional="true">
          <description>Time history curve for accelerations to impose (t, X, Y, Z columns)</description>
        </simple>
        <simple name="F-curve" type="string" optional="true">
          <description>Time history curve for forces to impose (t, X, Y, Z columns)</description>
        </simple>
    </complex>

    <!-- - - - - - neumann-boundary-condition - - - - -->
    <complex name="neumann-boundary-condition"
             type="NeumannBoundaryCondition"
             minOccurs="0"
             maxOccurs="unbounded">

      <description>Definition of Neumann (traction) boundary conditions</description>
        <extended name="surface" type="Arcane::FaceGroup">
          <description>Surface on which to apply these boundary conditions</description>
        </extended>
        <simple name="X-val" type="real" default="0.0" optional="true">
          <description>Constant traction value in X direction</description>
        </simple>
        <simple name="Y-val" type="real" default="0.0" optional="true">
          <description>Constant traction value in Y direction</description>
        </simple>
        <simple name="Z-val" type="real" default="0.0" optional="true">
          <description>Constant traction value in Z direction</description>
        </simple>
        <simple name = "curve" type = "string"  optional="true">
          <description>Filename containing the traction time history (3D vector)</description>
        </simple>
    </complex>

    <!-- - - - - - paraxial-boundary-condition - - - - -->
    <complex name  = "paraxial-boundary-condition"
             type  = "ParaxialBoundaryCondition"
             minOccurs = "0"
             maxOccurs = "unbounded">
      <description>Paraxial boundary condition</description>
      <extended name = "surface" type = "Arcane::FaceGroup">
        <description>Surface on which to apply these boundary conditions</description>
      </extended>
        <simple name = "incident-wave" type = "bool" default="false" optional="true">
          <description>Filename containing the incident wave field time history (3D vector)</description>
        </simple>
        <simple name = "cs" type = "real" optional="true">
          <description>Shear wave velocity for the outer domain (default=same as inner)</description>
        </simple>
        <simple name = "cp" type = "real" optional="true">
          <description>P-wave velocity for the outer domain (default=same as inner)</description>
        </simple>
        <simple name = "E-par" type = "real" optional="true">
          <description>Young modulus for the outer domain (default=same as inner)</description>
        </simple>
        <simple name = "nu-par" type = "real" optional="true">
          <description>Poisson ration for the outer domain (default=same as inner)</description>
        </simple>
        <simple name = "lambda-par" type = "real" optional="true">
          <description>1st Lame coefficient for the outer domain (default=same as inner)</description>
        </simple>
        <simple name = "mu-par" type = "real" optional="true">
          <description>2nd Lame coefficient (shear modulus) for the outer domain (default=same as inner)</description>
        </simple>
        <simple name = "rhopar" type = "real" optional="true">
          <description>Bulk density for the outer domain (default=same as inner)</description>
        </simple>
        <simple name = "incident-wave-file" type = "string"  optional="true">
          <description>Filename containing the incident wave field time history (3D vector)</description>
        </simple>
    </complex>

    <simple name="maxfreq" type="real" default="10." optional="true">
      <description>Maximum frequency filter to apply to the input motion</description>
    </simple>
    <simple name="rigidbody" type="bool" default="false" optional="true">
          <description>Indicator true for a rigid body motion (same acceleration imposed on all nodes)</description>
    </simple>

    <!-- - - - - - initial-node-condition - - - - -->
    <complex name="initial-node-condition" type="InitialNodeCondition" minOccurs="0" maxOccurs="unbounded">
      <description>Definition of initial node conditions</description>
        <enumeration name="type" type="TypesElastodynamic::eNodeCondition">
          <description>Type of boundary condition</description>
          <enumvalue genvalue="TypesElastodynamic::Displ" name="Displ" />
          <enumvalue genvalue="TypesElastodynamic::Vel" name="Vel" />
          <enumvalue genvalue="TypesElastodynamic::Acc" name="Acc" />
          <enumvalue genvalue="TypesElastodynamic::Force" name="Force" />
        </enumeration>
        <extended name="node-group" type="Arcane::NodeGroup">
          <description>NodeGroup on which initial node conditions will be applied</description>
        </extended>
        <simple name="vector" type="real3" default="0." optional = "true">
          <description>Nodal vector values to initialize</description>
        </simple>
    </complex>

    <!-- - - - - - gauss-integration - - - - -->
    <complex name="gauss-integration" type="GaussIntegration" minOccurs="0" maxOccurs="unbounded">
      <description>Definition of Gauss-Legendre integration features on groups of cells</description>
        <enumeration name="type" type="TypesElastodynamic::eGaussIntegrationOrder">
          <description>Integration orders in local cell directions</description>
          <enumvalue genvalue="TypesElastodynamic::Nint1" name="Nint1" />
          <enumvalue genvalue="TypesElastodynamic::Nint2" name="Nint2" />
          <enumvalue genvalue="TypesElastodynamic::Nint3" name="Nint3" />
        </enumeration>
      <extended name="cell-group" type="Arcane::CellGroup">
        <description>CellGroup on which these integration features will be applied</description>
      </extended>
      <simple name = "nint" type = "integer" default="2" optional = "true">
        <description>Integration order value along the local cell direction </description>
      </simple>
    </complex>
      <simple name = "nint1" type = "integer" default="2" optional = "true">
        <description>Integration order value along the 1st local cell direction </description>
      </simple>
      <simple name = "nint2" type = "integer" default="2" optional = "true">
        <description>Integration order value along the 2nd local cell direction </description>
      </simple>
      <simple name = "nint3" type = "integer" default="2" optional = "true">
        <description>Integration order value along the 3rd local cell direction </description>
      </simple>

    <!-- - - - - - analysis-type - - - - -->
    <enumeration name="analysis-type" type="TypesElastodynamic::eAnalysisType">
      <description>Type of analysis</description>
      <enumvalue genvalue="TypesElastodynamic::PlaneStrain" name="planestrain" />
      <enumvalue genvalue="TypesElastodynamic::PlaneStress" name="planestress" />
      <enumvalue genvalue="TypesElastodynamic::Axi" name="axi" />
      <enumvalue genvalue="TypesElastodynamic::ThreeD" name="3D" />
    </enumeration>

    <simple name="start" type="real" default="0." optional="true">
      <description>Start time for simulation</description>
    </simple>
    <simple name="final-time" type="real">
      <description>Final time for simulation</description>
    </simple>
    <simple name="deltat" type="real">
      <description>Timestep value for simulation</description>
    </simple>
    <simple name="beta" type="real" default="0.25" optional="true">
      <description>Newmark Beta coefficient</description>
    </simple>
    <simple name="gamma" type="real" default="0.5" optional="true">
      <description>Newmark Gamma coefficient</description>
    </simple>
    <simple name="alfam" type="real" default="0." optional="true">
      <description>Coefficient related to mass terms in Newmark Generalized alfa-method</description>
    </simple>
    <simple name="alfaf" type="real" default="0." optional="true">
      <description>Coefficient related to force terms in Newmark Generalized alfa-method</description>
    </simple>
    <simple name="alfa_method" type="bool" default="false" optional="true">
      <description>Boolean which is true if Newmark Generalized alfa-method is used</description>
    </simple>

    <!-- - - - - - linear-system - - - - -->
    <service-instance name = "linear-system"
                      type = "Arcane::FemUtils::IDoFLinearSystemFactory"
                      default = "AlephLinearSystem"/>

  </options>
</module>